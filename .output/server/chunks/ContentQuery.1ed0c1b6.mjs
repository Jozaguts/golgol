import{defineComponent as r,toRefs as t,computed as e,useSlots as i,useSSRContext as o,h as u}from"vue";import{b as a,q as l}from"./server.mjs";import{hash as p}from"ohash";import"ohmyfetch";import"hookable";import"unctx";import"destr";import"ufo";import"h3";import"defu";import"vue-router";import"vue/server-renderer";import"@iconify/vue/dist/offline";import"@iconify/vue";import"cookie-es";import"lodash-es";import"@formkit/auto-animate";import"./node-server.mjs";import"node-fetch-native/polyfill";import"http";import"https";import"unenv/runtime/fetch/index";import"scule";import"unstorage";import"unstorage/drivers/overlay";import"unstorage/drivers/memory";import"radix3";import"fs";import"pathe";import"url";import"unified";import"mdast-util-to-string";import"micromark/lib/preprocess.js";import"micromark/lib/postprocess.js";import"unist-util-stringify-position";import"micromark-util-character";import"micromark-util-chunked";import"micromark-util-resolve-all";import"remark-emoji";import"rehype-slug";import"remark-squeeze-paragraphs";import"rehype-external-links";import"remark-gfm";import"rehype-sort-attribute-values";import"rehype-sort-attributes";import"rehype-raw";import"remark-mdc";import"remark-parse";import"remark-rehype";import"mdast-util-to-hast";import"detab";import"unist-builder";import"mdurl";import"slugify";import"unist-util-position";import"html-tags";const n=r({name:"ContentQuery",props:{path:{type:String,required:!1,default:void 0},only:{type:Array,required:!1,default:void 0},without:{type:Array,required:!1,default:void 0},where:{type:Object,required:!1,default:void 0},sort:{type:Object,required:!1,default:void 0},limit:{type:Number,required:!1,default:void 0},skip:{type:Number,required:!1,default:void 0},locale:{type:String,required:!1,default:void 0},find:{type:String,required:!1,default:void 0}},async setup(r){const{path:i,only:o,without:u,where:n,sort:s,limit:m,skip:d,locale:f,find:v}=t(r),h=e((()=>{var r;return null==(r=i.value)?void 0:r.includes("/_")})),{data:y,refresh:c}=await a(`content-query-${p(r)}`,(()=>{let r;return r=i.value?l(i.value):l(),o.value&&(r=r.only(o.value)),u.value&&(r=r.without(u.value)),n.value&&(r=r.where(n.value)),s.value&&(r=r.sort(s.value)),m.value&&(r=r.limit(m.value)),d.value&&(r=r.skip(d.value)),f.value&&(r=r.where({_locale:f.value})),"one"===v.value?r.findOne():"surround"===v.value?i.value?r.findSurround(i):(console.warn("[Content] Surround queries requires `path` prop to be set."),console.warn("[Content] Query without `path` will return regular `find()` results."),r.find()):r.find()}));return{isPartial:h,data:y,refresh:c}},render(r){var t;const e=i(),{data:o,refresh:a,isPartial:l,path:p,only:n,without:s,where:m,sort:d,limit:f,skip:v,locale:h,find:y}=r,c={path:p,only:n,without:s,where:m,sort:d,limit:f,skip:v,locale:h,find:y};if("one"===c.find){if(!o&&(null==e?void 0:e["not-found"]))return e["not-found"]({props:c,...this.$attrs});if("markdown"===(null==o?void 0:o._type)&&!(null==(t=null==o?void 0:o.body)?void 0:t.children.length))return e.empty({props:c,...this.$attrs})}else if((!o||!o.length)&&(null==e?void 0:e["not-found"]))return e["not-found"]({props:c,...this.$attrs});if(null==e?void 0:e.default)return e.default({data:o,refresh:a,isPartial:l,props:c,...this.$attrs});return k="default",w={data:o,props:c,isPartial:l},u("pre",null,JSON.stringify({message:"You should use slots with <ContentQuery>!",slot:k,data:w},null,2));var k,w}}),s=n.setup;n.setup=(r,t)=>{const e=o();return(e.modules||(e.modules=new Set)).add("node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue"),s?s(r,t):void 0};export{n as default};
//# sourceMappingURL=ContentQuery.1ed0c1b6.mjs.map
